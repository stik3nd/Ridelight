apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: "kotlin-allopen"

android {
    def STRING_TYPE = 'String'

    compileSdkVersion 27

    defaultConfig {
        applicationId "com.rdireito.ridelight"
        minSdkVersion 21
        targetSdkVersion 27
        versionCode 3
        versionName "1.2.1"
        testInstrumentationRunner "com.rdireito.ridelight.common.di.AppJUnitRunner"
        multiDexEnabled true

        vectorDrawables.useSupportLibrary = true
    }

    signingConfigs {
        debug {
            storeFile file("keystore/debug.keystore")
        }
        release {
            storeFile file("keystore/release.keystore")
            storePassword "xXlj123Jnau3"
            keyAlias "ridelight0"
            keyPassword "kanha82178"
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    buildTypes {
        def BASE_API_HOST = 'BASE_API_HOST'
        def AUTH_TOKEN = 'AUTH_TOKEN'

        debug {
            buildConfigField(STRING_TYPE, BASE_API_HOST, "$debug_api_host")
            buildConfigField(STRING_TYPE, AUTH_TOKEN, "$debug_auth_token")
            signingConfig signingConfigs.debug
            debuggable true
        }
        release {
            buildConfigField(STRING_TYPE, BASE_API_HOST, "$release_api_host")
            buildConfigField(STRING_TYPE, AUTH_TOKEN, "$release_auth_token")
            signingConfig signingConfigs.release
            debuggable false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        execution 'ANDROID_TEST_ORCHESTRATOR'
    }

    sourceSets {
        androidTest.java.srcDirs += "src/testCommons/java"
        test.java.srcDirs += "src/testCommons/java"
    }
}

androidExtensions {
    experimental = true
}

allOpen {
    annotation("dagger.Module")
    annotation("dagger.Provides")
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Kotlin
//    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$versions.kotlin"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$versions.kotlin"

    // Android
    implementation "com.android.support:appcompat-v7:$versions.support_library"
    implementation "com.android.support:support-v4:$versions.support_library"
    implementation "com.android.support:cardview-v7:$versions.support_library"
    implementation "com.android.support:design:$versions.support_library"
    implementation "com.android.support.constraint:constraint-layout:$versions.constraint_layout"
    implementation "com.android.support:recyclerview-v7:$versions.support_library"
    implementation "com.google.android.gms:play-services-maps:$versions.play_services"
    implementation "com.google.android.gms:play-services-location:$versions.play_services"
    implementation "com.google.firebase:firebase-analytics:$versions.play_services"

    // Architecture Components
    implementation "android.arch.lifecycle:extensions:$versions.arch_components"
    kapt "android.arch.lifecycle:compiler:$versions.arch_components"

    // Crashlytics
    implementation "com.crashlytics.sdk.android:crashlytics:$versions.crashlytics"

    // Dagger
    implementation "com.google.dagger:dagger:$versions.dagger"
    kapt "com.google.dagger:dagger-compiler:$versions.dagger"
    implementation "com.google.dagger:dagger-android-support:$versions.dagger"
    kapt "com.google.dagger:dagger-android-processor:$versions.dagger"

    // ReactiveX
    implementation "io.reactivex.rxjava2:rxjava:$versions.rx_java"
    implementation "io.reactivex.rxjava2:rxandroid:$versions.rx_android"
    implementation "com.jakewharton.rxbinding2:rxbinding-kotlin:$versions.rx_binding"

    // Network
    implementation "com.squareup.retrofit2:retrofit:$versions.retrofit"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$versions.retrofit"
    implementation "com.squareup.retrofit2:converter-gson:$versions.retrofit"
    implementation "com.squareup.okhttp3:logging-interceptor:$versions.ok_http"

    // Image loading/caching
    implementation "com.github.bumptech.glide:glide:$versions.glide"
    kapt "com.github.bumptech.glide:compiler:$versions.glide"

    // Arrow
    implementation "io.arrow-kt:arrow-core:$versions.arrow"
    implementation "io.arrow-kt:arrow-syntax:$versions.arrow"
    implementation "io.arrow-kt:arrow-typeclasses:$versions.arrow"
    implementation "io.arrow-kt:arrow-data:$versions.arrow"
    implementation "io.arrow-kt:arrow-instances:$versions.arrow"
    kapt "io.arrow-kt:arrow-annotations-processor:$versions.arrow"

    // Utils
    implementation "com.jakewharton.timber:timber:$versions.timber"
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$versions.leak_canary"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$versions.leak_canary"
    implementation "com.tbruyelle.rxpermissions2:rxpermissions:$versions.rx_permissions"

    // Tests
    testImplementation "junit:junit:$versions.junit"
    testImplementation "org.mockito:mockito-core:$versions.mockito"
    testImplementation "com.nhaarman:mockito-kotlin:$versions.mockito_kotlin"
    testImplementation "org.hamcrest:hamcrest-all:$versions.hamcrest"

    androidTestImplementation "org.mockito:mockito-android:$versions.mockito"
    androidTestImplementation "com.nhaarman:mockito-kotlin:$versions.mockito_kotlin"
    androidTestImplementation "com.android.support.test:runner:$versions.support_test"
    androidTestImplementation "com.android.support.test:rules:$versions.support_test"
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'

    kaptAndroidTest "com.google.dagger:dagger-compiler:$versions.dagger"
    kaptAndroidTest "com.google.dagger:dagger-android-processor:$versions.dagger"

    androidTestUtil "com.android.support.test:orchestrator:$versions.support_test"
}

// Ensure the no-op dependency is always used in JVM tests.
configurations.all { config ->
    if (config.name.contains('UnitTest')) {
        config.resolutionStrategy.eachDependency { details ->
            if (details.requested.group == 'com.squareup.leakcanary' && details.requested.name == 'leakcanary-android') {
                details.useTarget(group: details.requested.group, name: 'leakcanary-android-no-op', version: details.requested.version)
            }
        }
    }
}

apply plugin: 'com.google.gms.google-services'
